{"version":3,"sources":["serviceWorker.js","components/Box.js","components/Grid.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Box","className","onClick","props","onMark","index","this","mark","Component","Grid","changeTurn","setState","state","turn","verify","boxes","updateWinner","winner","handleMark","updatedBoxes","map","item","reset","box","class","key","App","over","gameOver","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd0a2fa2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport './Box.css';\r\n\r\nclass Box extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"box\" onClick={() => this.props.onMark(this.props.index)}>\r\n                <span className=\"mark\">{this.props.mark}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Box;\r\n","import React, {Component} from 'react';\r\nimport Box from './Box';\r\nimport './Grid.css';\r\n\r\nclass Grid extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            winner: '',\r\n            turn: 'X',\r\n            boxes: [\r\n                { index: 1, mark: ''},\r\n                { index: 2, mark: ''},\r\n                { index: 3, mark: ''},\r\n                { index: 4, mark: ''},\r\n                { index: 5, mark: ''},\r\n                { index: 6, mark: ''},\r\n                { index: 7, mark: ''},\r\n                { index: 8, mark: ''},\r\n                { index: 9, mark: ''},\r\n            ]\r\n        }\r\n    }      \r\n    \r\n    changeTurn = () => {\r\n        this.setState(state => {\r\n            return {turn: (state.turn === 'X') ? 'O' : 'X'};\r\n        });\r\n    }\r\n\r\n    verify = () => {\r\n        let boxes = this.state.boxes;\r\n        if((boxes[0].mark === boxes[1].mark && boxes[1].mark === boxes[2].mark && boxes[0].mark !== '')\r\n            ||(boxes[3].mark === boxes[4].mark && boxes[4].mark === boxes[5].mark  && boxes[3].mark !== '')\r\n            ||(boxes[6].mark === boxes[7].mark && boxes[7].mark === boxes[8].mark  && boxes[6].mark !== '')\r\n            ||(boxes[0].mark === boxes[3].mark && boxes[3].mark === boxes[6].mark  && boxes[0].mark !== '')\r\n            ||(boxes[1].mark === boxes[4].mark && boxes[4].mark === boxes[7].mark  && boxes[1].mark !== '')\r\n            ||(boxes[2].mark === boxes[5].mark && boxes[8].mark === boxes[2].mark  && boxes[2].mark !== '')\r\n            ||(boxes[0].mark === boxes[4].mark && boxes[4].mark === boxes[8].mark  && boxes[0].mark !== '')\r\n            ||(boxes[2].mark === boxes[4].mark && boxes[4].mark === boxes[6].mark  && boxes[2].mark !== '')    \r\n        ){\r\n            this.updateWinner();\r\n        }\r\n        else if(boxes[0].mark !== '' \r\n                && boxes[1].mark !== ''\r\n                && boxes[2].mark !== ''\r\n                && boxes[3].mark !== ''\r\n                && boxes[4].mark !== ''\r\n                && boxes[5].mark !== ''\r\n                && boxes[6].mark !== ''\r\n                && boxes[7].mark !== ''\r\n                && boxes[8].mark !== ''\r\n                )\r\n        {\r\n            this.setState({winner: 'noone'});\r\n        }\r\n    }\r\n\r\n    updateWinner = () => {\r\n        (this.state.turn === 'X') ? this.setState({ winner: 'Cross' }) : this.setState({ winner: 'Circle' });\r\n    }\r\n\r\n    handleMark = index => {\r\n        const boxes = this.state.boxes;\r\n        const updatedBoxes = boxes.map(item => {\r\n            if(item.index === index && item.mark === ''){\r\n                item.mark = this.state.turn;\r\n            }      \r\n            return item;\r\n        });\r\n\r\n        this.setState({ boxes : updatedBoxes });\r\n        this.verify();\r\n        this.changeTurn();\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({winner: ''});\r\n\r\n        let boxes = this.state.boxes;\r\n        boxes.map(box => box.mark = '');\r\n        this.setState({boxes});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.winner === 'noone') {\r\n            return (\r\n                <div class=\"container\">\r\n                    <div className='grid'>\r\n                        {this.state.boxes.map((box) => (\r\n                            <Box \r\n                                key = {box.index}\r\n                                index = {box.index} \r\n                                mark = {box.mark}\r\n                                onMark = {() => {}}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <span>Draw!</span>\r\n                    <button onClick={this.reset}>New Game</button>\r\n                </div>\r\n            )\r\n        }\r\n        else if(this.state.winner !== '') {\r\n            return (\r\n                <div class=\"container\">\r\n                    <div className='grid'>\r\n                        {this.state.boxes.map((box) => (\r\n                            <Box \r\n                                key = {box.index}\r\n                                index = {box.index} \r\n                                mark = {box.mark}\r\n                                onMark = {() => {}}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <span>{this.state.winner} wins</span>\r\n                    <button onClick={this.reset}>New Game</button>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div className='grid'>\r\n                        {this.state.boxes.map((box) => (\r\n                            <Box \r\n                                key = {box.index}\r\n                                index = {box.index} \r\n                                mark = {box.mark}\r\n                                onMark = {this.handleMark}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <span>Turn : {this.state.turn}</span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from './components/Grid';\n\nclass App extends Component {\n  render(){\n    return <Grid over = {this.gameOver}/>\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}